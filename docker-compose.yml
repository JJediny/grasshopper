geocoder:
  extends:
    file: docker-compose-common.yml
    service: geocoder
  links:
    - lines
    - points
    - parser

lines:
  extends:
    file: docker-compose-common.yml
    service: lines
  links: 
    - elasticsearch

points:
  extends:
    file: docker-compose-common.yml
    service: points
  links: 
    - elasticsearch

parser:
  extends:
    file: docker-compose-common.yml
    service: parser

loader:
  extends:
    file: docker-compose-common.yml
    service: loader
  links:
    - elasticsearch

elasticsearch:
  extends:
    file: docker-compose-common.yml
    service: elasticsearch

ui:
  extends:
    file: docker-compose-common.yml
    service: ui
  links:
    - geocoder
    - lines
    - points
    - parser

cadvisor:
  image: google/cadvisor
  ports:
    - "9090:8080"
  volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro

# Logspout setup taken from:
#   https://github.com/gliderlabs/logspout#route-all-container-output-to-remote-syslog
logspout:
  image: gliderlabs/logspout:master 
  ports:
    - "8000:8000"
  volumes: 
    - /var/run/docker.sock:/tmp/docker.sock
  links:
    - logstash
  environment:
    LOGSPOUT: ignore
    SYSLOG_FORMAT: rfc3164
  command: syslog://logstash:5514

logstash:
  image: logstash
  expose:
    - 5514
  links:
    - elasticsearch
  environment:
    LOGSPOUT: ignore
  command: >
    logstash -e '
    input { syslog{ port => 5514 } }
    filter { 
        grok { 
          match => { "message" => [
            "%{IP:http_client_ip} - - \[%{HTTPDATE:http_req_time}\] (.)%{WORD:http_req_method} %{URIPATH:uri_path}(?:%{URIPARAM:uri_params})? HTTP\/%{NUMBER:http_ver}(.) %{NUMBER:http_resp_code} %{NUMBER:http_resp_size} (.)-(.) (.)%{GREEDYDATA:http_client}(.)",
            "\[%{TIMESTAMP_ISO8601:log_time}\]\[%{LOGLEVEL:log_level}%{SPACE}\]\[%{DATA:log_source}%{SPACE}\]%{SPACE}\[%{DATA:es_node}\]%{SPACE}\[%{DATA:es_index}\]%{SPACE}%{GREEDYDATA:message}",
            "\[%{TIMESTAMP_ISO8601:log_time}\]\[%{LOGLEVEL:log_level}%{SPACE}\]\[%{DATA:thread_name}\]%{SPACE}%{GREEDYDATA:message}"
          ] }
          overwrite => ["message"]
        }
        kv { source => "uri_params" prefix => "uri_param_" field_split => "&?" }
    }
    output { elasticsearch { host => "elasticsearch" } }'

kibana:
  image: marcbachmann/kibana4
  environment:
    LOGSPOUT: ignore
  links:
    - elasticsearch
  ports:
    - "5601:5601"

